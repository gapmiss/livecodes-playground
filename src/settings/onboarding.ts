export const helpPopovers = {
  appUrl:
  { 
    title: 'App URL', 
    description: 'Load the playground from a custom URL (e.g. <a href="https://livecodes.io/docs/features/self-hosting" target="_blank" rel="noopener noreferrer" class="external-link">self-hosted app</a>, <a href="https://livecodes.io/docs/features/permanent-url" target="_blank" rel="noopener noreferrer" class="external-link">permanent URL</a>). Trailing slash <strong>/</strong> is required.<br /><br />Default: <strong>https://v21.livecodes.io/</strong>' 
  },
  shortUrl:
  { 
    title: 'Short share URL', 
    description: 'This requires sending the project configuration (<strong>including source code</strong>) to a server that saves the code and provides a short Id which can be used to retrieve the project. <strong>It cannot then be deleted</strong>.<p>The app hosted on <a href="https://livecodes.io" target="_blank" rel="noopener noreferrer" class="external-link">https://livecodes.io</a> uses an API endpoint specifically provided to generate short URLs for LiveCodes share service. We will make every effort to keep that online and available for free use, so long as it is not abused.</p><p>Short URLs generated by LiveCodes share service are <strong>private</strong> by default and are not listed or indexed.</p><p>See <a href="https://livecodes.io/docs/features/share" target="_blank" rel="noopener noreferrer" class="external-link">Livecodes documentation</a> page on sharing for further up-to-date details.</p>' 
  },
  playgroundFolder: 
  { 
    title: 'Playground folder', 
    description: 'Select a vault folder to save & persist playground configuration files (JSON).<br /><br />Default: <strong>playgrounds</strong>'
  },
  notesFolder: 
  { 
    title: 'Notes folder', 
    description: 'Select a vault folder to save playground notes (Markdown).<br /><br />Default: <strong>playgrounds/notes</strong>'
  },
  autoWatch: 
  { 
    title: 'Auto watch', 
    description: 'Automatically watch for playground changes, then update the corresponding configuration file (JSON).<br /><br />Default: <strong>enabled</strong>'
  },
	editor:
	{ 
		title: 'Code editor', 
		description: '<p>The following code editors are supported:</p><div><p><strong>monaco</strong>: This is the code editor that powers <strong>VS Code</strong>. It is feature-rich and supports autocomplete with <strong>IntelliSense</strong> (including types for custom libraries). <!-- However, it requires a relatively large download and is not supported in mobile browsers. --></p><p><strong>codemirror</strong>: Has many editing features, including autocomplete, with good <strong>mobile support</strong>.</p><p><strong>codejar</strong>: A <strong>lightweight</strong> code editor with very basic editing features. PrismJs is used for syntax highlighting. Please note that some editor settings are not supported in CodeJar</p></div>Default: <strong>monaco</strong>' 
	},
	editorTheme:
	{
		title: 'Editor theme',
		description: 'Set the editor theme for each editor and on light/dark modes.'
	}
}

/**
 * https://josias-r.github.io/boarding.js
 * https://github.com/josias-r/boarding.js
 */
export const onboardingSteps = [
  {
    element: '.setting-item-heading-onboarding', 
    popover:
    {
      title: "Livecodes settings",
      description: "Click the <kbd>Next →</kbd> button to start a brief tour of Livecodes' settings. HINT: Use your keyboard's <kbd>←</kbd> and <kbd>→</kbd> arrow keys to navigate the tour.",
    }
  },
  { 
    element: '.livecodes-settings-input-appurl', 
    popover: helpPopovers.appUrl
  },
  { 
    element: '.livecodes-settings-input-shorturl', 
    popover: helpPopovers.shortUrl
  },
  {
    element: '.livecodes-settings-input-playgrounds', 
    popover: helpPopovers.playgroundFolder
  },
  {
    element: '.livecodes-settings-input-autowatch', 
    popover: helpPopovers.autoWatch
  },
  {
    element: '.livecodes-settings-input-notes', 
    popover: helpPopovers.notesFolder 
  },
  { 
    element: '.dropdownEditor', 
    popover: helpPopovers.editor
  }
]

export const buttonTour = [
  {
    element: '.watch-button', 
    popover:
    {
      title: "Watch for changes",
      description: "Automatically watch for playground changes, then update the corresponding configuration file (JSON).<br /><br />Default: <strong>enabled</strong>",
    }
  },
  {
    element: '.create-note-button', 
    popover:
    {
      title: "Create note",
      description: "Create a markdown note with created date, playground link, and corresponding codeblocks from the playground editor.",
    }
  },
  {
    element: '.save-json-button', 
    popover:
    {
      title: "Save as JSON",
      description: "Save playground as a new JSON file. Please note, the new playground will need to be opened in a new playground view.",
    }
  },
  {
    element: '.save-html-button', 
    popover:
    {
      title: "Save as HTML",
      description: "Save playground results to HTML. A prompt will ask where to save the HTML file on your device.",
    }
  },
  {
    element: '.copy-html-button', 
    popover:
    {
      title: "Copy HTML to clipboard",
      description: "Copy playground results HTML to the clipboard.",
    }
  },
  {
    element: '.share-url-button', 
    popover:
    {
      title: "Copy share URL to clipboard",
      description: '<p>The generated URL encodes the project configuration in a base-64-encoded compressed query string. This step is generated locally without sending the code to any server. However, depending on the size of the project, the URL can be very long.</p><p>If the setting <strong>Short share URL</strong> is enabled in settings, a short share URL will be generated. This requires sending the project configuration (<strong>including source code</strong>) to a server that saves the code and provides a short Id which can be used to retrieve the project.</p><p>See <a href="https://livecodes.io/docs/features/share" target="_blank" rel="noopener noreferrer" class="external-link">Livecodes documentation</a> page on sharing for further up-to-date details.</p>',
    }
  },
  {
    element: '.theme-mode-button', 
    popover:
    {
      title: "Set theme mode",
      description: "Sets the playground theme to light/dark mode.",
    }
  },
  {
    element: '.external-resources-button', 
    popover:
    {
      title: "External resources",
      description: '<p>URLs to external CSS stylesheets and JS scripts can be added to the playground. URLs to stylesheets/scripts should be added each in a separate line. Stylesheets and scripts are loaded in the result page before editor codes. Thus, CSS properties defined in external stylesheets can be overriden in the style editor. Global javascript variables defined in external scripts are available to code in the script editor.</p><p>Choice of CSS presets, currently <a href="https://necolas.github.io/normalize.css/" target="_blank" rel="noopener noreferrer" class="external-link">Normalize.css</a> and <a href="https://meyerweb.com/eric/tools/css/reset/" target="_blank" rel="noopener noreferrer" class="external-link">Reset CSS</a>.</p>',
    }
  },
  {
    element: '.playground-settings-button', 
    popover:
    {
      title: "Playground settings",
      description: '<p>1. Playground title, which is used as result pane title and title meta tag.</p><p>2. Playground description, which is used as result pane description meta tag.</p><p>3. &lt;head&gt;, which is content added to the result pane &lt;head&gt; element. <p>Default:<br /><code>&lt;meta charset="UTF-8" /&gt;</code><br /><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;</code>.<p>4. htmlAttrs.<p>Attributes added to the result pane <code>&lt;html&gt;</code> element. It can be an object or a string.</p><p>Example:<br /><code>{ lang: "en", class: "dark" }</code> or <code>lang="en" class="dark"</code><br />become<br /><code>&lt;html lang="en" class="dark"&gt;</code>.</p><p>Default: <code>lang="en" class=""</code></p>',
    }
  },
]
